// Copyright 2020 Dhiraj Wishal
// SPDX-License-Identifier: Apache-2.0

#pragma once
#ifndef _DYNAMIK_PIPELINE_TYPE_DEFINES_H
#define _DYNAMIK_PIPELINE_TYPE_DEFINES_H

/*
 Author:	Dhiraj Wishal
 Date:		17/06/2020
*/

namespace Dynamik
{
	/* Renderer Primitive Topology */
	enum class DMK_API RPrimitiveTopology {
		PRIMITIVE_TOPOLOGY_POINT_LIST,
		PRIMITIVE_TOPOLOGY_LINE_LIST,
		PRIMITIVE_TOPOLOGY_LINE_STRIP,
		PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
		PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
		PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
		PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
		PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
		PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
		PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
		PRIMITIVE_TOPOLOGY_PATCH_LIST,
	};

	/* Renderer Polygon Mode */
	enum class DMK_API RPolygonMode {
		POLYGON_MODE_FILL,
		POLYGON_MODE_LINE,
		POLYGON_MODE_POINT,
		POLYGON_MODE_FILL_RECTANGLE,
	};

	/* Renderer Cull Mode */
	enum class DMK_API RCullMode {
		CULL_MODE_NONE = 0,
		CULL_MODE_FRONT_BIT = BIT_SHIFT(1),
		CULL_MODE_BACK_BIT = BIT_SHIFT(2),
		CULL_MODE_FRONT_AND_BACK_BIT = BIT_SHIFT(3),
	};

	/* Renderer Front Face */
	enum class DMK_API RFrontFace {
		FRONT_FACE_COUNTER_CLOCKWISE,
		FRONT_FACE_CLOCKWISE,
	};

	/* Renderer Logic Op */
	enum class DMK_API RLogicOp {
		LOGIC_OP_CLEAR,
		LOGIC_OP_AND,
		LOGIC_OP_AND_REVERSE,
		LOGIC_OP_COPY,
		LOGIC_OP_AND_INVERTED,
		LOGIC_OP_NO_OP,
		LOGIC_OP_XOR,
		LOGIC_OP_OR,
		LOGIC_OP_NOR,
		LOGIC_OP_EQUIVALENT,
		LOGIC_OP_INVERT,
		LOGIC_OP_OR_REVERSE,
		LOGIC_OP_COPY_INVERTED,
		LOGIC_OP_OR_INVERTED,
		LOGIC_OP_NAND,
		LOGIC_OP_SET,
	};

	/* Renderer Dynamic State */
	enum class DMK_API RDynamicState {
		DYNAMIC_STATE_VIEWPORT,
		DYNAMIC_STATE_SCISSOR,
		DYNAMIC_STATE_LINE_WIDTH,
		DYNAMIC_STATE_DEPTH_BIAS,
		DYNAMIC_STATE_BLEND_CONSTANTS,
		DYNAMIC_STATE_DEPTH_BOUNDS,
		DYNAMIC_STATE_STENCIL_COMPARE_MASK,
		DYNAMIC_STATE_STENCIL_WRITE_MASK,
		DYNAMIC_STATE_STENCIL_REFERENCE,
		DYNAMIC_STATE_VIEWPORT_W_SCALING,
		DYNAMIC_STATE_DISCARD_RECTANGLE_EXT,
		DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT,
		DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE,
		DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER,
		DYNAMIC_STATE_EXCLUSIVE_SCISSOR,
		DYNAMIC_STATE_LINE_STIPPLE_EXT,
	};

	/* Renderer Color Blend Factor */
	enum class DMK_API RColorBlendFactor {
		COLOR_BLEND_FACTOR_ZERO,
		COLOR_BLEND_FACTOR_ONE,
		COLOR_BLEND_FACTOR_SRC_COLOR,
		COLOR_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
		COLOR_BLEND_FACTOR_DST_COLOR,
		COLOR_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
		COLOR_BLEND_FACTOR_SRC_ALPHA,
		COLOR_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
		COLOR_BLEND_FACTOR_DST_ALPHA,
		COLOR_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
		COLOR_BLEND_FACTOR_CONSTANT_COLOR,
		COLOR_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
		COLOR_BLEND_FACTOR_CONSTANT_ALPHA,
		COLOR_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
		COLOR_BLEND_FACTOR_SRC_ALPHA_SATURATE,
		COLOR_BLEND_FACTOR_SRC1_COLOR,
		COLOR_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
		COLOR_BLEND_FACTOR_SRC1_ALPHA,
		COLOR_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
	};

	/* Renderer Color Blend Op */
	enum class DMK_API RColorBlendOp {
		COLOR_BLEND_OP_ADD,
		COLOR_BLEND_OP_SUBTRACT,
		COLOR_BLEND_OP_REVERSE_SUBTRACT,
		COLOR_BLEND_OP_MIN,
		COLOR_BLEND_OP_MAX,
		COLOR_BLEND_OP_ZERO,
		COLOR_BLEND_OP_SRC,
		COLOR_BLEND_OP_DST,
		COLOR_BLEND_OP_SRC_OVER,
		COLOR_BLEND_OP_DST_OVER,
		COLOR_BLEND_OP_SRC_IN,
		COLOR_BLEND_OP_DST_IN,
		COLOR_BLEND_OP_SRC_OUT,
		COLOR_BLEND_OP_DST_OUT,
		COLOR_BLEND_OP_SRC_ATOP,
		COLOR_BLEND_OP_DST_ATOP,
		COLOR_BLEND_OP_XOR,
		COLOR_BLEND_OP_MULTIPLY,
		COLOR_BLEND_OP_SCREEN,
		COLOR_BLEND_OP_OVERLAY,
		COLOR_BLEND_OP_DARKEN,
		COLOR_BLEND_OP_LIGHTEN,
		COLOR_BLEND_OP_COLORDODGE,
		COLOR_BLEND_OP_COLORBURN,
		COLOR_BLEND_OP_HARDLIGHT,
		COLOR_BLEND_OP_SOFTLIGHT,
		COLOR_BLEND_OP_DIFFERENCE,
		COLOR_BLEND_OP_EXCLUSION,
		COLOR_BLEND_OP_INVERT,
		COLOR_BLEND_OP_INVERT_RGB,
		COLOR_BLEND_OP_LINEARDODGE,
		COLOR_BLEND_OP_LINEARBURN,
		COLOR_BLEND_OP_VIVIDLIGHT,
		COLOR_BLEND_OP_LINEARLIGHT,
		COLOR_BLEND_OP_PINLIGHT,
		COLOR_BLEND_OP_HARDMIX,
		COLOR_BLEND_OP_HSL_HUE,
		COLOR_BLEND_OP_HSL_SATURATION,
		COLOR_BLEND_OP_HSL_COLOR,
		COLOR_BLEND_OP_HSL_LUMINOSITY,
		COLOR_BLEND_OP_PLUS,
		COLOR_BLEND_OP_PLUS_CLAMPED,
		COLOR_BLEND_OP_PLUS_CLAMPED_ALPHA,
		COLOR_BLEND_OP_PLUS_DARKER,
		COLOR_BLEND_OP_MINUS,
		COLOR_BLEND_OP_MINUS_CLAMPED,
		COLOR_BLEND_OP_CONTRAST,
		COLOR_BLEND_OP_INVERT_OVG,
		COLOR_BLEND_OP_RED,
		COLOR_BLEND_OP_GREEN,
		COLOR_BLEND_OP_BLUE,
	};

	/* Renderer Color Blend State */
	struct RColorBlendState {
		B1 enable;
		RColorBlendFactor srcColorBlendFactor;
		RColorBlendFactor dstColorBlendFactor;
		RColorBlendOp colorBlendOp;
		RColorBlendFactor srcAlphaBlendFactor;
		RColorBlendFactor dstAlphaBlendFactor;
		RColorBlendOp alphaBlendOp;
		RColorComponent colorWriteMask;
	};
}

#endif // !_DYNAMIK_PIPELINE_TYPE_DEFINES_H
