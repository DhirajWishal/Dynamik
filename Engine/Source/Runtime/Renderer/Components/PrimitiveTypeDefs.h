#pragma once
#ifndef _DYNAMIK_RENDERER_PRIMITIVE_TYPE_DEFINES_H
#define _DYNAMIK_RENDERER_PRIMITIVE_TYPE_DEFINES_H

/*
 Author:    Dhiraj Wishal
 Date:      25/05/2020

 This file contains all the definitions and enums for different RBL APIs. Since the Dynamik Engine's default
 RBL API is Vulkan, all these defines are directly Vulkan Compatible.
*/
#include "Macros/Global.h"

namespace Dynamik
{
	/* Image Type enum */
	enum class DMK_API ImageType {
		IMAGE_TYPE_2D,
		IMAGE_TYPE_2D_ARRAY,
		IMAGE_TYPE_CUBEMAP,
		IMAGE_TYPE_CUBEMAP_ARRAY,
	};

	/* Image Usage (OR operator can be used) */
	enum DMK_API ImageUsage {
		IMAGE_USAGE_TRANSFER_SRC = BIT_SHIFT(1),
		IMAGE_USAGE_TRANSFER_DST = BIT_SHIFT(2),
		IMAGE_USAGE_RENDER = BIT_SHIFT(3),
		IMAGE_USAGE_STORAGE = BIT_SHIFT(4),
		IMAGE_USAGE_COLOR_ATTACHMENT = BIT_SHIFT(5),
		IMAGE_USAGE_DEPTH_ATTACHMENT = BIT_SHIFT(6),
		IMAGE_USAGE_TRANSIENT_ATTACHMENT = BIT_SHIFT(7),
		IMAGE_USAGE_INPUT_ATTACHMENT = BIT_SHIFT(8),
	};

	/* Resource Memory Type */
	enum DMK_API ResourceMemoryType {
		RESOURCE_MEMORY_TYPE_HOST_ACCESSABLE = BIT_SHIFT(1),
		RESOURCE_MEMORY_TYPE_HOST_VISIBLE = BIT_SHIFT(2),
		RESOURCE_MEMORY_TYPE_HOST_COHERENT = BIT_SHIFT(3),
		RESOURCE_MEMORY_TYPE_HOST_CACHED = BIT_SHIFT(4),
		RESOURCE_MEMORY_TYPE_PROTECTED = BIT_SHIFT(6),
	};

    /* Image Sampler Filter */
    enum class DMK_API ImageSamplerFilter {
        IMAGE_SAMPLER_FILTER_NEAR = 0,
        IMAGE_SAMPLER_FILTER_LINEAR = 1,
        IMAGE_SAMPLER_FILTER_CUBIC = 1000015000,
    };

    /* Image Sampler Address Mode */
    enum class DMK_API ImageSamplerAddressMode {
        IMAGE_SAMPLER_ADDRESS_MODE_REPEAT,
        IMAGE_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
        IMAGE_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
        IMAGE_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
        IMAGE_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
    };

	/* Image Sampler Border Color */
	enum class DMK_API ImageSamplerBorderColor {
		IMAGE_SAMPLER_BORDER_COLOR_F32_TRANSPARENT_BLACK,
		IMAGE_SAMPLER_BORDER_COLOR_I32_TRANSPARENT_BLACK,
		IMAGE_SAMPLER_BORDER_COLOR_F32_OPAQUE_BLACK,
		IMAGE_SAMPLER_BORDER_COLOR_I32_OPAQUE_BLACK,
		IMAGE_SAMPLER_BORDER_COLOR_F32_OPAQUE_WHITE,
		IMAGE_SAMPLER_BORDER_COLOR_I32_OPAQUE_WHITE,
	};

	/* Dynamik Pipeline Compare Op */
	enum class DMK_API StencilCompareOp {
		STENCIL_COMPARE_OP_NEVER,
		STENCIL_COMPARE_OP_LESS,
		STENCIL_COMPARE_OP_EQUAL,
		STENCIL_COMPARE_OP_LESS_OR_EQUAL,
		STENCIL_COMPARE_OP_GREATER,
		STENCIL_COMPARE_OP_NOT_EQUAL,
		STENCIL_COMPARE_OP_GREATER_OR_EQUAL,
		STENCIL_COMPARE_OP_ALWAYS,
	};

	/* Image Sampler Mipmap mode */
	enum class DMK_API ResourceMipMapMode {
		RESOURCE_MIPMAP_MODE_NEAREST,
		RESOURCE_MIPMAP_MODE_LINEAR,
	};

	/* Image Swizzle Components */
	enum class DMK_API ImageSwizzleComponent {
		IMAGE_SWIZZLE_IDENTITY,
		IMAGE_SWIZZLE_ZERO,
		IMAGE_SWIZZLE_ONE,
		IMAGE_SWIZZLE_R,
		IMAGE_SWIZZLE_G,
		IMAGE_SWIZZLE_B,
		IMAGE_SWIZZLE_A,
	};

	/* Buffer Types */
	enum class DMK_API BufferType {
		BUFFER_TYPE_STAGGING,
		BUFFER_TYPE_VERTEX,
		BUFFER_TYPE_INDEX,
		BUFFER_TYPE_UNIFORM,
		BUFFER_TYPE_INDIRECT,
		BUFFER_TYPE_RAY_TRACING,
	};
}

#endif // !_DYNAMIK_RENDERER_PRIMITIVE_TYPE_DEFINES_H
